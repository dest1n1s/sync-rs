name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross-compilation tools (if needed)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build Release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}

      - name: Package Artifacts
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/sync-rs release/sync-rs-${{ matrix.name }}

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --token $CARGO_REGISTRY_TOKEN

  package-aur:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/package-aur-packages') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Set up environment
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Generate PKGBUILD
        run: |
          # Download the source tarball to calculate its SHA256
          echo "Downloading source tarball..."
          TARBALL_URL="https://github.com/Dest1n1s/sync-rs/archive/v${VERSION}.tar.gz"
          curl -sL "${TARBALL_URL}" -o "sync-rs-${VERSION}.tar.gz"
          SHA256=$(sha256sum "sync-rs-${VERSION}.tar.gz" | cut -d' ' -f1)

          # Create PKGBUILD from template
          echo "Creating PKGBUILD..."
          cat contrib/aur/PKGBUILD.template | \
            sed "s/__VERSION__/${VERSION}/g" | \
            sed "s/__SHA256__/${SHA256}/g" > PKGBUILD

      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: sync-rs
          pkgbuild: ./PKGBUILD
          commit_username: Dest1n1
          commit_email: dest1nis2022@gmail.com
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,ecdsa,ed25519

  # package-homebrew:
  #   needs: build-and-release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Cache APT packages
  #       uses: actions/cache@v3
  #       with:
  #         path: /var/cache/apt/archives
  #         key: ${{ runner.os }}-apt-homebrew-${{ hashFiles('**/package-homebrew-packages') }}
  #         restore-keys: |
  #           ${{ runner.os }}-apt-homebrew-
  #           ${{ runner.os }}-apt-

  #     - name: Set up environment
  #       run: |
  #         VERSION=${GITHUB_REF#refs/tags/v}
  #         echo "VERSION=$VERSION" >> $GITHUB_ENV
  #         sudo apt-get update
  #         sudo apt-get install -y curl jq git

  #     - name: Update Homebrew formula
  #       if: github.repository_owner == 'dest1n1s'
  #       env:
  #         HOMEBREW_GITHUB_TOKEN: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}
  #       run: |
  #         if [ -n "$HOMEBREW_GITHUB_TOKEN" ]; then
  #           # Setup Git authentication
  #           ./contrib/homebrew/setup-git-auth.sh "$HOMEBREW_GITHUB_TOKEN"

  #           # Run with verbose output for debugging
  #           echo "Running Homebrew update script..."
  #           bash -x ./contrib/homebrew/update-homebrew.sh $VERSION
  #         else
  #           echo "HOMEBREW_GITHUB_TOKEN not set, skipping Homebrew update"
  #         fi
